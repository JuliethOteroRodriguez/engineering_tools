#!/reg/g/psdm/sw/conda/inst/miniconda2-prod-rhel6/envs/ana-1.3.17/bin/python
import RegDB.experiment_info
import argparse
import socket
import os
import sys

parser = argparse.ArgumentParser()
parser.add_argument("--run", help="get last run", action='store_true')
parser.add_argument("--exp", help="get experiment name", action='store_true')
parser.add_argument("--live", help="ongoing?", action='store_true')
parser.add_argument("--ended", help="ended", action='store_true')
parser.add_argument("--hutch", help="get experiment for hutch xxx")
parser.add_argument("--station", help="optional station for hutch with two daqs, e.g. cxi and mfx")
parser.add_argument("--getHutch", help="get hutch (uppercase)", action='store_true')
parser.add_argument("--gethutch", help="get hutch (lowercase)", action='store_true')
parser.add_argument("--getstation", help="get hutch station (for multiple daqs)", action='store_true')
parser.add_argument("--getbase", help="get base daq name (hutch_station if multiple daqs, otherwise hutch)", action='store_true')
parser.add_argument("--getinstrument", help="get instrument (HUTCH_station if multiple daqs, otherwise hutch)", action='store_true')
parser.add_argument("--getcnf", help="get cnf file name)", action='store_true')
parser.add_argument("--files_for_run", help="get xtc files for run")
parser.add_argument("--nfiles_for_run", help="get xtc files for run")
parser.add_argument("--setExp", help="set experiment name")
args = parser.parse_args()

hutches=['amo','sxr','xpp','xcs','mfx','cxi','mec', 'det', 'fee']
foundHutch=False
hutch=''

#populate hutch-specific subnets here:
hutch_subnets={'amo': ['37'],'sxr': ['39'],'xpp': ['38','46'],'xcs': ['25', '43'],'mfx': ['62','24'],'cxi': ['68','26'] ,'mec': ['45'],'det': [],'fee': ['36']}

if args.hutch:
    hutch=args.hutch
    if hutch in hutches:
        hutch=hutch.upper()
    else:
        for ihutch in hutches:
            if hutch.find(ihutch.upper())>=0:
                hutch=ihutch.upper()
                foundHutch=True
                break
        if not foundHutch:
            print 'unknown_hutch'
            sys.exit()
else:
    hostname=socket.gethostname()
    ip=socket.gethostbyname(hostname)
    subnet=ip.split('.')[2]
    for ihutch in hutches: #use the IP address to match the host to a hutch by subnet
        if subnet in hutch_subnets.get(ihutch):
            hutch=ihutch.upper()
            foundHutch=True
            break
    if not foundHutch:
        for ihutch in hutches:
            if hostname.find(ihutch)>=0:
                hutch=ihutch.upper()
                foundHutch=True
                break
    if not foundHutch and hostname.find('psusr')>=0:
        if hostname.find('psusr11')>=0:
            hutch='AMO'
        elif hostname.find('psusr12')>=0:
            hutch='SXR'
        elif hostname.find('psusr13')>=0:
            hutch='XPP'
        elif hostname.find('psusr21')>=0:
            hutch='XCS'
        elif hostname.find('psusr22')>=0:
            hutch='CXI'
        elif hostname.find('psusr23')>=0:
            hutch='MEC'
        elif hostname.find('psusr24')>=0:
            hutch='MFX'
        if hutch!='':
            foundHutch=True
    else:
        #then check current path
        path=os.getcwd()
        for ihutch in hutches:
            if path.find(ihutch)>=0:
                hutch=ihutch.upper()
                foundHutch=True
                break
        if not foundHutch and path.find('xrt')+hostname.find('xrt')>=-1 or path.find('xtod')+hostname.find('xtod')>=-1:
            hutch='FEE' #because we have so many names for the same subnet.
            foundHutch=True
        if not foundHutch:
            #then ask.....outside of python
            print 'unknown_hutch'
            sys.exit()
    if args.getHutch:
        print hutch.upper()
        sys.exit()
    if args.gethutch:
        print hutch.lower()
        sys.exit()

if hutch.lower() in ['mfx','cxi']:
    nstations = 2
    if args.station is not None:
        station = int(args.station)
    else:
        hostname=socket.gethostname()
        if 'monitor' in hostname:
            station = 1
        else:
            station = 0
    daq_base = '{:}_{:}'.format(hutch.lower(),station)
    instrument = '{:}:{:}'.format(hutch.upper(),station)
else:
    daq_base = hutch.lower()
    instrument = hutch.upper()
    nstations = 1
    if args.station:
        station = int(args.station)
    else: 
        station=0

if station >= nstations: 
    print "Invalid --station={:} keyword set for hutch {:}".format(hutch)
    sys.exit()

if args.getstation:
    print station
    sys.exit()
elif args.getinstrument:
    print instrument
    sys.exit()
elif args.getbase:
    print daq_base
    sys.exit()
elif args.getcnf:
    print daq_base+'.cnf'
    sys.exit()

if args.exp:
    print RegDB.experiment_info.active_experiment(hutch,station)[1]

if args.run:
    try:
        if args.ended:
            if RegDB.experiment_info.experiment_runs(hutch)[-1]['end_time_unix'] is not None:
                print RegDB.experiment_info.experiment_runs(hutch)[-1]['num']
            else:
                runLive = RegDB.experiment_info.experiment_runs(hutch)[-1]['num']
                print int(runLive)-1
        else:
            print RegDB.experiment_info.experiment_runs(hutch)[-1]['num']
            if args.live:
                if RegDB.experiment_info.experiment_runs(hutch)[-1]['end_time_unix'] is None:
                    print 'live'
                else:
                    print 'ended'
    except:
        print 'no runs yet'

if args.files_for_run or args.nfiles_for_run:
    if args.files_for_run:
        run = int(args.files_for_run)
    if args.nfiles_for_run:
        run = int(args.nfiles_for_run)

    if args.setExp:
        exp=args.setExp
    else:
        exp=RegDB.experiment_info.active_experiment(hutch)[1]
    expNum = RegDB.experiment_info.name2id(exp)

    runLast = RegDB.experiment_info.experiment_runs(hutch, exp)[-1]['num']
    if run > runLast:
        print 'run %d not taken yet, last run is'%(run,runLast)
    else:
        file_list = RegDB.experiment_info.get_open_files(expNum,run)
        if args.files_for_run:
            for tfile in file_list:
                print tfile['dirpath'].replace('/u2/pcds/pds','/reg/d/psdm')
        elif args.nfiles_for_run:
            #look at files, remove stream 80, only first chunk, return number.
            nFiles=0
            for tfile in file_list:
                tfilename = tfile['dirpath'].replace('/u2/pcds/pds','/reg/d/psdm')
                if tfilename.find('c00')>=0 and tfilename.find('-s8')<0:
                    nFiles=nFiles+1
            print '%d %d'%(nFiles,len(file_list))
