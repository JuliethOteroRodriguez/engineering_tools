#!/bin/bash

export STRIPTOOL=/reg/g/pcds/package/epics/3.14/extensions/R3.14.12/bin/rhel6-x86_64/StripTool
export LD_LIBRARY_PATH=/reg/common/package/python/2.5.5/lib:/reg/common/package/qt/4.6.2/lib/x86_64-linux:/reg/g/pcds/package/epics/3.14/base/current/lib/linux-x86_64:/reg/g/pcds/package/epics/3.14/extensions/current/lib/linux-x86_64
export PATH=/reg/g/pcds/package/epics/3.14/base/current/bin/linux-x86_64:/reg/g/pcds/package/epics/3.14/extensions/current/bin/linux-x86_64:/reg/common/package/python/2.5.5/bin:/reg/common/package/qt/4.6.2/bin:/bin:/usr/bin:/reg/g/pcds/engineering_tools/xpp/scripts
export EPICS_CA_MAX_ARRAY_BYTES=8388608
ulimit -c unlimited

sharedIpm='hx2_ipm hfxdg2_ipm'
xcsIpm='decmono ipmmono diomono pim3 pim3m pim4 ipm1 ipm3 ipm4 ipm5 pim5 ipmgonLD ipmlamLD snddio'
xppIpm='diomono decmono ipm2 ipm3 pim3 diodeU'
cxiIpm='dg2ipm dg3ipm'
mfxIpm='dg1ipm dg2ipm'
mecIpm='ipm1 ipm2 ipm3 hxm_pim xt2_pim2 xt2pim3 tc1_imb1 usr_imb1 usr_imb2 las_imb1 las_imb2'
hfxIpm='hfxipm1'

ipmList()
{
for box in $sharedIpm; do echo $box; done
if [ $hutch == 'xcs' ]; then
   for box in $xcsIpm; do echo $box; done
elif [ $hutch == 'xpp' ]; then
   for box in $xppIpm; do echo $box; done
elif [ $hutch == 'cxi' ]; then
   for box in $cxiIpm; do echo $box; done
elif [ $hutch == 'mfx' ]; then
   for box in $mfxIpm; do echo $box; done
elif [ $hutch == 'mec' ]; then
   for box in $mecIpm; do echo $box; done
elif [ $hutch == 'lfe' ]; then
   for box in $hfxIpm; do echo $box; done
else
    echo 'hutch cannot be determined, quit'
    exit
fi
}

ipmSetEnvPars()
{
if [ $# -lt 1 ]; then
    echo 'need one arguments: boxname'
    exit
fi

if [ $1 == 'hx2_ipm' ]; then
    IOC="IOC:HX2:SB1:BMMON"
    BASE='HX2:SB1:BMMON'
    EVR='HX2:SB1:BMMON:EVR'
    WAVE8='hx2_ipm'
elif [ $1 == 'hfxdg2_ipm' ]; then
    IOC="IOC:HFX:DG2:BMMON"
    BASE='HFX:DG2:BMMON'
    EVR='HFX:DG2:BMMON:EVR'
    WAVE8='hfxipm'
fi

if [ $hutch == 'xcs' ]; then
    if [ $1 == 'decmono' ]; then
	BASE="HFX:MON:IMB:03"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'diomono' ]; then
	BASE="HFX:MON:IMB:02"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'ipmmono' ]; then
	BASE="HFX:MON:IMB:01"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'pim3' ]; then
	BASE="HFX:DG3:IMB:04"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'pim3m' ]; then
	BASE="HFX:DG3:IMB:02"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'ipm1' ]; then
	BASE="XCS:DG1:IMB:01"
	IOC="XCS:R04:IOC:34"
	EVR="XCS:R04:EVR:34"
    elif [ $1 == 'ipm3' ]; then
	BASE="XCS:DG3:IMB:03"
	IOC="XCS:R38:IOC:43"
	EVR="XCS:R38:EVR:43"
    elif [ $1 == 'ipm4' ]; then
	IOC="IOC:XCS:SB1:BMMON"
	BASE='XCS:SB1:BMMON'
	EVR='XCS:SB1:BMMON:EVR'
	WAVE8='sb1bmmon'
    elif [ $1 == 'pim4' ]; then
	BASE="XCS:SB1:IMB:02"
	IOC="IOC:XCS:IPM"
	EVR="XCS:R44:EVR:01"
    elif [ $1 == 'ipm5' ]; then
	IOC="IOC:XCS:SB2:BMMON"
	BASE='XCS:SB2:BMMON'
	EVR='XCS:SB2:BMMON:EVR'
	WAVE8='sb2bmmon'
    elif [ $1 == 'pim5' ]; then
	BASE="XCS:SB2:IMB:02"
	IOC="IOC:XCS:IPM"
	EVR="XCS:R44:EVR:01"
    elif [ $1 == 'ipmgonLD' ]; then
	BASE="XCS:USR:IMB:01"
	IOC="IOC:XCS:USR:IPM"
	EVR="XCS:R42:EVR:01"
    elif [ $1 == 'ipmlamLD' ]; then
	BASE="XCS:LAM:IMB:02"
	IOC="IOC:XCS:IPM"
	EVR="XCS:R44:EVR:01"
    elif [ $1 == 'snddio' ]; then
	IOC="IOC:XCS:SND:DIO"
	BASE='XCS:SND:DIO'
	EVR='XCS:SND:DIO:EVR'
	WAVE8='snddio'
    fi
elif [ $hutch == 'cxi' ]; then
    if [ $1 == 'dg2ipm' ]; then
	IOC="IOC:CXI:DG2:BMMON"
	BASE='CXI:DG2:BMMON'
	EVR='CXI:DG2:BMMON:EVR'
	WAVE8='dg2ipm'
    elif [ $1 == 'dg3ipm' ]; then
	IOC="IOC:CXI:DG3:BMMON"
	BASE='CXI:DG3:BMMON'
	EVR='CXI:DG3:BMMON:EVR'
	WAVE8='dg3ipm'
    fi
elif [ $hutch == 'mfx' ]; then
    if [ $1 == 'dg1ipm' ]; then
	IOC="IOC:MFX:DG1:BMMON"
	BASE='MFX:DG1:BMMON'
	EVR='MFX:DG1:BMMON:EVR'
	WAVE8='dg1ipm'
    elif [ $1 == 'dg2ipm' ]; then
	IOC="IOC:MFX:DG2:BMMON"
	BASE='MFX:DG2:BMMON'
	EVR='MFX:DG2:BMMON:EVR'
	WAVE8='dg2ipm'
    fi
elif [ $hutch == 'xpp' ]; then
    if [ $1 == 'diomono' ]; then
	IOC="IOC:XPP:IPM"
	BASE='XPP:MON:IPM:02'
	EVR='XPP:IPM:EVR'
    elif [ $1 == 'decmono' ]; then
	IOC="IOC:XPP:IPM"
	BASE='XPP:MON:IPM:01'
	EVR='XPP:IPM:EVR'
    elif [ $1 == 'ipm2' ]; then
	IOC="IOC:XPP:SB2:BMMON"
	BASE='XPP:SB2:BMMON'
	EVR='XPP:SB2:BMMON:EVR'
	WAVE8='sb2bmmon'
    elif [ $1 == 'ipm3' ]; then
	IOC="IOC:XPP:SB3:BMMON"
	BASE='XPP:SB3:BMMON'
	EVR='XPP:SB3:BMMON:EVR'
	WAVE8='sb3bmmon'
    elif [ $1 == 'pim3' ]; then
	IOC="IOC:XPP:IPM"
	BASE='XPP:SB3:IPM:02'
	EVR='XPP:IPM:EVR'
    elif [ $1 == 'diodeU' ]; then
	IOC="IOC:XPP:IPM"
	BASE='XPP:USR:IPM:01'
	EVR='XPP:IPM:EVR'
    fi
elif [ $hutch == 'mec' ]; then
    if [ $1 == 'ipm1' ]; then
	IOC="XRT:R33:IOC:39"
	BASE='MEC:HXM:IPM:01'
	EVR='XRT:R44:EVR:39'
    elif [ $1 == 'hxm_pim' ]; then
	IOC="XRT:R33:IOC:39"
	BASE='MEC:HXM:PIM:01'
	EVR='XRT:R44:EVR:39'
    elif [ $1 == 'pim2' ]; then
	IOC="IOC:MEC:IMB02"
	BASE='MEC:XT2:PIM:02'
	EVR='MEC:XT2:EVR:01'
    elif [ $1 == 'pim3' ]; then
	IOC="IOC:MEC:IMB02"
	BASE='MEC:XT2:PIM:03'
	EVR='MEC:XT2:EVR:01'
    elif [ $1 == 'tc1_imb1' ]; then
	IOC="IOC:MEC:IPIMB01"
	EVR='MEC:TC1:EVR:01'
	BASE='MEC:TC1:IMB:01'
    elif [ $1 == 'usr_imb1' ]; then
	IOC="IOC:MEC:IPIMB01"
	EVR='MEC:TC1:EVR:01'
	BASE='MEC:USR:IMB:01'
    elif [ $1 == 'usr_imb2' ]; then
	IOC="IOC:MEC:IPIMB01"
	EVR='MEC:TC1:EVR:01'
	BASE='MEC:USR:IMB:02'
    elif [ $1 == 'las_imb1' ]; then
	IOC="IOC:MEC:IPIMB01"
	EVR='MEC:TC1:EVR:01'
	BASE='MEC:LAS:IMB:01'
    elif [ $1 == 'las_imb2' ]; then
	IOC="IOC:MEC:IPIMB01"
	EVR='MEC:TC1:EVR:01'
	BASE='MEC:LAS:IMB:02'
    elif [ $1 == 'ipm2' ]; then 
	IOC="IOC:MEC:XT2-1:BMMON"
	EVR="MEC:XT2-1:BMMON:EVR"
	BASE="MEC:XT2-1:BMMON"
	WAVE8='xt2-1bmmon'
    elif [ $1 == 'ipm3' ]; then 
	IOC="IOC:MEC:XT2-2:BMMON"
	EVR="MEC:XT2-2:BMMON:EVR"
	BASE="MEC:XT2-2:BMMON"
	WAVE8='xt2-2bmmon'
    fi

    if [ ${#BASE} == 0 ]
    then    
	usage
	exit
    fi
fi
} 

ipmGUI(){
    if [ ${#WAVE8} -gt 0 ]; then
    	/reg/g/pcds/pyps/apps/wave8/latest/wave8 --base $BASE --evr $EVR --ioc $IOC
    else
    	/reg/g/pcds/controls/pycaqt/ipimb/ipimb.py --base $BASE --ioc $IOC --evr $EVR --dir /reg/g/pcds/controls/pycaqt/ipimb	
    fi
}

get_hutch(){
    hutch=`get_info --gethutch`
    if [ $hutch = unknown_hutch ]; then
	echo 'unknown hutch, cannot use ipmConfigEpics script'
	exit 1
    fi
    HUTCH=${hutch^^}
}

usage()
{
echo 'in usage'
cat << EOF
usage: $0 options

we are starting an ipm GUI

OPTIONS:
-b : boxname out of:
-d: fix issues with Bld Damage (likely camera IOC w/plugins on same machine)
EOF
get_hutch
ipmList
}

helpBld(){
    if [ $hutch == 'xcs' ]; then 
	if  [[ $BOXNAME == 'ipm3'  ||  $BOXNAME == 'dio3' ]]; then
	    caput XCS:DG3:CVV:02:Stat2:EnableCallbacks 0
	    caput HFX:DG3:CVV:01:Stat2:EnableCallbacks 0
	fi
    fi
}

BOXNAME=''
HELPDAQBLD=0
while getopts "b:dh" OPTION
do
    case $OPTION in
	h)
	    usage
	    exit 1
	    ;;
	b)
	    BOXNAME=$OPTARG
	    ;;
	d) 
	    HELPDAQBLD=1
	    ;;
	?)
	    usage
	    exit
	    ;;
	esac
done


get_hutch
if [ ${#BOXNAME} == 0 ]; then    
    ipmList $hutch
    printf 'Enter box name from list:\n'; read BOXNAME
fi

ipmSetEnvPars $BOXNAME
if [ $HELPDAQBLD -gt 0 ]; then
    helpBld
else
    ipmGUI
fi
