#! /bin/bash

ips_from_ip(){
if [ $# -lt 1 ]; then
    echo 'need arguments: input IP'
fi
INIP=$1
if [ $HUTCH == 'xpp' ]; then
    if [[ $INIP == *'172.21.84'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.84./.22./g `
    elif [[ $INIP == *'172.21.22'* ]]; then
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.22./.84./g `
    else
	echo 'IP not FEZ or CDS for xpp'
    fi
elif [ $HUTCH == 'xcs' ]; then
    if [[ $INIP == *'172.21.80'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.80./.25./g `
    elif [[ $INIP == *'172.21.25'* ]]; then
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.25./.80./g `
    else
	echo 'IP not FEZ or CDS for xcs'
    fi
elif [ $HUTCH == 'mfx' ]; then
    if [[ $INIP == *'172.21.72'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.72./.24./g `
    elif [[ $INIP == *'172.21.24'* ]]; then
	echo 'DEBUG in MFX GIVEN FEZ '
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.24./.72./g `
	echo 'DEBUG ' $INIP $SRVIP
    else
	echo 'IP not FEZ or CDS for mfx'
    fi
elif [ $HUTCH == 'cxi' ]; then
    if [[ $INIP == *'172.21.68'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.68./.26./g `
    elif [[ $INIP == *'172.21.26'* ]]; then
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.26./.68./g `
    else
	echo 'IP not FEZ or CDS for cxi'
    fi
elif [ $HUTCH == 'mec' ]; then
    if [[ $INIP == *'172.21.76'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.76./.27./g `
    elif [[ $INIP == *'172.21.27'* ]]; then
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.27./.76./g `
    else
	echo 'IP not FEZ or CDS for mec'
    fi
elif [ $HUTCH == 'det' ]; then
    if [[ $INIP == *'172.21.58'* ]]; then
	SRVIP=$INIP
	SRVIPFEZ=`echo $INIP | sed s/.58./.59./g `
    elif [[ $INIP == *'172.21.59'* ]]; then
	SRVIPFEZ=$INIP
	SRVIP=`echo $INIP | sed s/.59./.58./g `
    else
	echo 'IP not FEZ or CDS'
    fi
fi
}

isCam(){
    ISCAM=`grep $DEV /reg/g/pcds/pyps/config/*/camviewer.cfg | grep -v '#' | wc -l`
    if [ $ISCAM -gt 0 ]; then
	ISGIGE=`grep $DEV /reg/g/pcds/pyps/config/*/camviewer.cfg | grep -v '#' | grep GIGE | wc -l`
	if [ $ISGIGE -gt 0 ]; then
	    read -p 'This is a gige camera, start the maim edm screen? (y/n)'
	    if [ "$REPLY"=="y" ]; then
		gige -c $DEV -m 
	    else
		read -p 'Do you want to restart acqisition (y/n)'
		if [ "$REPLY"=="y" ]; then
		    gige -c $DEV -n
		else
		    read -p 'Do you want to reboot the IOC (y/n)'
		    if [ "$REPLY"=="y" ]; then
			gige -c $DEV -r
		    fi
		fi
	    fi
	    exit
	else
	    echo 'this is a non-gige camera, go to the IOC manager to reboot/check status'
	    exit
	fi
    fi
}

host_from_PV(){
    if [[ $NAME == *':'* ]]  && [[ $HUTCH == 'unknown_hutch' ]]; then
	echo 'Getting info for a host of a PV currently only works on the hutch networks'
	exit
    fi
    if [[ ${NAME:0:3} == ${HUTCH^^} ]]; then
        HOST=`cainfo $NAME | grep Host | awk {'print $2'} | awk 'BEGIN { FS = ":"}; {print $1}' | sed s/'.pcdsn'/''/g`
	if [[ $HOST == *'disconnected'* ]]; then
	    echo PV $NAME is disconnected
	    exit
	fi
	echo PV $NAME is hosted on server $HOST
	NAME=$HOST
	DEV=$HOST
    else
	echo 'Getting info for a host of a PV currently only works on the hutch network (e.g. for MFX:xxx from the mfx network)'
	exit
    fi
}

usage(){
cat << EOF
usage: $0 options

script to check statii of servers & reboot/power cycle them

SIGNATURE:
serverStat <servername> <optinal: commant>

default command is 'status', list of commands:
status : print power status of machine, try to ping interfaces
on     : power machine on
off    : power machine off
cycle  : power cycle machine, wait a few second in off state
reset  : reset machine (ideally try that before power cycling)
console: open the ipmi console where possible

EOF
}

DIRTMP=`dirname  "${BASH_SOURCE[0]}"`
DIR="$( cd $DIRTMP && pwd -P )"
PATH=$PATH:$DIR

HUTCH=`get_hutch_name`
for name in "amo" "sxr" "xpp" "xcs" "mfx" "cxi" "mec" "det"; do
    if [[ $DEV == *$name* ]]; then
	HUTCH=$name
	break
    fi
done


HOST_HAS_FEZ=`netconfig search $HOSTNAME-fez --brief | wc -l`
let HOST_HAS_FEZ-=1

if [[ $# < 2 ]]; then
    if [[ $# < 1 ]]; then
	usage
	exit
        echo 'why here?'
    elif [[ $1 =~ ^(h|-h|-help|--help) ]]; then
	usage
	exit
        echo 'why here?'
    else
	CMD='status'
	DEV=$1
    fi
else
    if [[ $2 =~ ^(cycle|off|on|status|console|reset) ]]; then
	DEV=$1
	CMD=$2
    else
	DEV=$1
	CMD=$2
    fi
fi
NAME=$DEV
  
if [[ $NAME == *':'* ]]; then
    host_from_PV
fi

if [[ $NAME == *'172.21'* ]]; then
    ISSRV=1
    ips_from_ip $DEV
    NAME=`netconfig search $SRVIP --brief | awk {'print $1'}`
    echo $IP is an IP for $NAME
else
    ISSRV=`netconfig search $NAME | grep 'Found' | awk {'print $2'}`
fi
#exit

if  [[ $NAME == *rec* ]]; then
    if [[ $CMD == "off" ]] || [[ $CMD == "cycle" ]]; then
	printf "This is a recorder, better not to power cycle unless necessary, try to reset first. Quit? " "$NAME" "$CMD"; read ANSWER		
	if [[ $ANSWER == 'y' ]] || [[ $ANSWER == 'Y' ]] || [[ $ANSWER == 'yes' ]]; then  
	    printf 'quit now\n'
	    exit
	fi
    fi    
fi

#check if this is a DAQ device
if [[ $ISSRV -lt 1 ]] && [[ $HUTCH != 'unknown_hutch' ]]; then
    if [[  $DEV == *'event'* ]]; then
	DSSNODES=`grep dss_nodes /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | head -n1`
	i=$((${#DEV}-1));NEV=`echo "${DEV:$i:1}"`;AWKNUM=$(($NEV+4))
	NAME=`echo $DSSNODES | awk -v temp=$AWKNUM {'print $temp'}  |  sed s/,// | sed s/_/-/g`
    else
	NDEV=`grep $DEV /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | wc -l`
	if [ $NDEV -eq 1 ]; then
	    NAME=`grep $DEV /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | awk {'print $1'} | sed s/{host://g | sed s/,// | sed s/_/-/g`
	elif  [ $NDEV -eq 0 ]; then
	    #check if we have a camera, will exit if yes.
	    isCam
	    #was not a camera, will quit
	    echo 'no device of this name found, exit'
	    exit
	else
	    NAME=`grep "$DEV'" /reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf | grep -v '#' | grep host | awk {'print $1'} | sed s/{host://g | sed s/,// | sed s/_/-/g`
	fi
    fi
    ISSRV=`netconfig search $NAME | grep 'Found' | awk {'print $2'}`
    if [[ $ISSRV -lt 1 ]]; then
	#after this is done, move head of first way ot getting NAME
	echo 'does not have ipmi, is not DAQ device.'
	exit
    fi

    SRVIP=`netconfig search $NAME | grep IP: | awk {'print $2'}`
    ips_from_ip $SRVIP
    echo 'server for ' $DEV ' is: ' $NAME 
else
    SRVIP=`netconfig search $DEV | grep IP: | awk {'print $2'}`
    ips_from_ip $SRVIP
fi

NAMEIPMI=`echo $NAME'-ipmi'`
if [[ $CMD == "off" ]]; then
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power off
elif [[ $CMD == "on" ]]; then
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power on
elif [[ $CMD == "cycle" ]]; then
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power off
    sleep 10
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power on
    sleep 5
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power status
elif [[ $CMD == "console" ]]; then
    echo "To exit console use ~."
    # Deactivate if it is activated:
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI sol deactivate &> /dev/null
    # Call console
    xterm -hold -bg black -fg white -T $NAME -e ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI sol activate &
elif [[ $CMD == "reset" ]]; then
    ipmitool -I lanplus -U ADMIN -P ipmia8min -H $NAMEIPMI power reset
else
    ISON=`ipmitool -U ADMIN -P ipmia8min -H $NAMEIPMI power status | awk 'NF>=2 {print $(NF)}'`
    if [[ $ISON == *off* ]]; then
	echo $DEV is powered off
	exit
    fi

    echo $DEV is powered on
    PNG=`ping -c 1 $SRVIP | grep transmitted | awk '{print $4}'`
    IFUP=0
    if [[ $NAME == *daq* ]]; then
	if [[ $HOST_HAS_FEZ -ge 1 ]]; then
	    PNGFEZ=`ping -c 1 $SRVIPFEZ | grep transmitted | awk '{print $4}'`
	    echo $NAME ' is a server with IP: ' $SRVIP ' (ping: ' $PNG '), ' $SRVIPFEZ ' (ping' $PNGFEZ ')'
	    if [[ $(($PNG+$PNGFEZ)) -gt 1 ]]; then
		echo 'cds&fez interfaces are up'
	    fi
	else
	    echo $NAME ' is a server with IP: ' $SRVIP ' (ping: ' $PNG '), ' $SRVIPFEZ ' (cannot ping from machine without fez )'
	    if [ $PNG -gt 0 ]; then
		echo 'cds interface is up'
	    fi	    
	fi
    else
	echo $DEV ' is a server with IP: ' $SRVIP ' (ping: ' $PNG ')'
	if [ $PNG -gt 0 ]; then
	    echo 'cds interface is up'
	fi
    fi
fi
