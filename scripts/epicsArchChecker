#!/reg/g/pcds/pyps/conda/py36/envs/pcds-4.1.6/bin/python
import os
import argparse


def main():
    a_file = open("/tmp/output.txt", "w")
    a_file.truncate()
    a_file.close()
    parser = argparse.ArgumentParser(description='Checks duplicates Alias and'
                                     ' Pvs from a epicsArch.txt files.'
                                     ' Checks id Pv does not have and Alias.'
                                     ' Usage: epicsArchChecker'
                                     ' <Fullpath-name-file>. ')
    parser.add_argument('pathname',
                        help='Full pathname of the file to check'
                        ' e.g /xpp/misc/epicsArch3.txt',
                        type=str)
    args = parser.parse_args()

    fullpath = args.pathname
    dirpath = os.path.dirname(fullpath)
    filename = os.path.basename(fullpath)
    os.chdir(dirpath)
    create_lists(filename)
    read_file_result()
    pass


'''This fucntion reads recursively
the main file, then classifies and
stores the alises, Pvs, and filenames
from each file read'''


def create_lists(filename):
    myKeys = []
    myPvs = []
    files = []

    with open(filename, 'r') as f:
        for line in f:
            if line[0] == "<":
                s_filename = line[2:].strip()
                create_lists(s_filename)

            elif line[0] == "*":
                if line[0] != " ":
                    myKeys.append(line[1:].strip())
                    files.append(filename)
            else:
                if line[0] != "\n":
                    if line[0] != "#":
                        myPvs.append(line.strip())
                if len(myKeys) < len(myPvs):
                    myKeys.append(line.strip())
                    files.append(filename)
    input_file_result(myKeys, myPvs, files)
    pass


'''This fucntion stores the lists:
myKeys, myPvs, and files
and the name of the files
in a tmp file.'''


def input_file_result(myKeys, myPvs, files):
    MyFile = open('/tmp/output.txt', 'a')
    if myKeys:
        MyFile.write('#####File name####')
        MyFile.write('\n')
        for element3 in files:
            MyFile.write("< ")
            MyFile.write(element3)
            MyFile.write('\n')
        MyFile.write('\n')
        MyFile.write('#####keys######')
        MyFile.write('\n')
        for element in myKeys:
            MyFile.write("*")
            MyFile.write(element)
            MyFile.write('\n')
        MyFile.write('\n')
        MyFile.write('######Pvs######')
        MyFile.write('\n')
        for element1 in myPvs:
            MyFile.write(element1)
            MyFile.write('\n')
        MyFile.write('\n')
        MyFile.write('\n')
    MyFile.close()
    pass


'''This fucntion reads the temp file
which contains the aliases and pvs
and the name of the file where they
belong. Then it will create three
lists:T_Keys (total aliases)
T_Pvs (Total Pvs)
fileName (name of the files)'''


def read_file_result():
    T_Keys = []
    T_Pvs = []
    fileName = []
    with open('/tmp/output.txt', 'r') as f:
        for line in f:
            if line[0] == "<":
                fileName.append(line[2:].strip())
            if line[0] == "*":
                T_Keys.append(line[1:].strip())
            else:
                if line[0] != "\n":
                    if line[0] != "#":
                        if line[0] != "<":
                            T_Pvs.append(line.strip())

    '''print(len(fileName))
    print(len(T_Keys))
    print(len(T_Pvs))####flag####
    print(fileName)
    print(T_Keys)
    print(T_Pvs)####flag####'''
    check_duplicates(T_Keys, T_Pvs, fileName)
    pass


'''This fucntion finds and stores the
duplicates aliases and pvs in the
lists: T_Keys (total aliases)
T_Pvs (Total Pvs)'''


def check_duplicates(T_Keys, T_Pvs, fileName):
    S_keys = sorted(T_Keys)
    D_myKeys = []
    for i in S_keys:
        if S_keys.count(i) > 1:
            if i not in D_myKeys:
                D_myKeys.append(i)
    S_Pvs = sorted(T_Pvs)
    D_myPvs = []
    for i in S_Pvs:
        if S_Pvs.count(i) > 1:
            if i not in D_myPvs:
                D_myPvs.append(i)
    find_index(D_myKeys, D_myPvs, T_Keys, T_Pvs, fileName)
    pass


'''This fucntion finds and stores
the indexes of the the duplicates
in the lists: T_Keys (total aliases)
T_Pvs (Total Pvs)'''


def find_index(D_myKeys, D_myPvs, T_Keys, T_Pvs, fileName):
    ind_keys = []
    ind_pvs = []

    for i in range(len(D_myKeys)):
        for j in range(len(T_Keys)):
            if D_myKeys[i] == T_Keys[j]:
                ind_keys.append(j)

    for i in range(len(D_myPvs)):
        for j in range(len(T_Pvs)):
            if D_myPvs[i] == T_Pvs[j]:
                ind_pvs.append(j)

    display(fileName, T_Keys, T_Pvs, ind_keys, ind_pvs)
    pass


'''This fucntion displays three
reports: Pvs with no aliases asigned
Duplicates by Alias and PV
(Under construction) Status of the Pv'''


def display(fileName, T_Keys, T_Pvs, ind_keys, ind_pvs):
    duplikey = []
    duplipvs = []
    for j in ind_keys:
        duplikey.append(T_Keys[j])
    for j in ind_pvs:
        duplipvs.append(T_Pvs[j])

    c_key = sorted(set(duplikey))
    c_pv = sorted(set(duplipvs))

    for j in range(len(T_Pvs)):
        if T_Keys[j] == T_Pvs[j]:
            print("Report of Pvs with no Alias: \n")
            break
    for j in range(len(T_Pvs)):
        if T_Keys[j] == T_Pvs[j]:
            print("***WARNING***", "Alias:",
                  T_Keys[j], "Pv:",
                  T_Pvs[j], "Location:",
                  fileName[j],
                  "You must assign an Alias for this Pv.")
    print("\n")
    if c_key and c_pv:
        print("Report of duplicate Aliases and Pvs from the input file: \n")
    elif c_pv:
        print("Report of duplicate Pvs from the input file: \n")
    elif c_key:
        print("Report of duplicate Aliases from the input file: \n")
    size_per_col = 40
    nameA = "Alias"
    nameL = "Location"
    nameP = "Pv"
    if c_key:
        print("\n------------------------------------",
              "Duplicate by Aliases"
              "------------------------------------\n")
        for i in c_key:
            if " " in i:
                print("Duplicate Alias: ", i,
                      " ***Aliases should not have spaces***")

            else:
                print("Duplicate Alias: ", i)
            print("\n")

            print(str(nameP).center(size_per_col),
                  str(nameL).center(size_per_col))
            print(90*"=")

            for j in range(len(T_Keys)):
                if i == T_Keys[j]:
                    print(str(T_Pvs[j]).center(size_per_col),
                          str(fileName[j]).center(size_per_col))
            print(90*"=")
            print("\n")
    ms = "**This alias has a space**"
    if c_pv:
        print("------------------------------------",
              "Duplicate by Pvs",
              "------------------------------------\n")
        for i in c_pv:
            print("Duplicate Pv: ", i)
            print("\n")
            print(str(nameA).center(size_per_col),
                  str(nameL).center(size_per_col))
            print(90*"=")
            for j in range(len(T_Pvs)):
                if i == T_Pvs[j]:
                    if " " in T_Keys[j]:
                        print(str(T_Keys[j]).center(size_per_col),
                              str(fileName[j]).center(size_per_col),
                              (ms).center(size_per_col))

                    else:
                        print(str(T_Keys[j]).center(size_per_col),
                              str(fileName[j]).center(size_per_col))

            print(90*"=")
            print("\n")
    pass


if __name__ == "__main__":
    main()
