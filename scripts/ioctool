#! /usr/bin/env bash

function iocfpv {
   ioc=""
   ioc=$(grep_pv $1 | sed -n 's/\/reg\/d\/iocData\/\(\S*\)\/iocInfo/\1/p')
   if [ "$ioc" == "" ]; then
      echo "Did find an ioc associated with this PV." 
      exit 1
   fi
}

function error {
   ioc=$1
   
   iocpath=""
   iocpath=$(grep_ioc $ioc all | grep "id:'$ioc'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [[ $iocpath == "" ]]; then
      echo "Did not find ${ioc} running anywhere. Exiting..."
      exit 1
   fi

}  

function iocdir {
   ioc=$1
   iocpath=""
   iocpath=$(grep_ioc $ioc all | grep "id:'$ioc'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [[ $iocpath == "" ]]; then
      echo "Did not find ${ioc} running anywhere. Exiting..."
      exit 1
   fi
   

   if [[ ! $iocpath =~ ^/.* ]]; then
      iocpath=/reg/g/pcds/epics/"${iocpath}"
     
   fi

}

function ioccfg {
   iocdir "$1"
   iocfile="${iocpath}"/"$1".cfg;
   if [ -f "$iocfile" ]; then
      iocfile="$iocfile"
   else
      iocfile=${iocpath}/iocBoot/${1}/st.cmd
      if [ -f "$iocfile" ]; then
         iocfile="$iocfile"
      else
         echo -e "Neither file found:\n"${iocpath}"/"${1}".cfg\n$iocfile"
         return 1
         exit 1
      fi
   fi

}

usage(){
cat << EOF
usage: $BASH_SOURCE <ioc>|<pv> [option]

Script that returns information about an ioc given its name or a PV it hosts

default option is 'name', list of options:
name   : returns the name of the ioc
dir    : returns the directory the ioc is running from
cddir  : open the directory the ioc is running from (put a "." with a space after, before calling script with this option)
cfg    : returns the file name of the cfg (or st.cmd)
less   : opens the cfg (or st.cmd) in less
data   : returns the path of the appropriate iocData directory if it exists
telnet : starts a telnet session with the ioc 

EOF
}

if [[ ($1 == "--help") || ($1 == "-h") ]]; then
   usage
   exit 0
fi


if [ $# -lt 1 ]; then
   echo  'need arguments: input ioc or pv name'
   usage
   exit 1
fi
	
NAME=$1
CMD=$2

#################################################################

if [[ $NAME == *':'* ]]; then
   iocfpv $NAME
   NAME="$ioc"
elif [[ $NAME == *'-'* ]]; then
   NAME=$1
else
   echo "Could not find $NAME. Exiting..."
   exit 1
fi   

#################################################################

if [ "$CMD" == "name" ]; then
#   error "$NAME"   
   echo "$NAME"
elif [[ "$CMD" == "" ]]; then
   echo "$NAME"

#################################################################

elif [ "$CMD" ==  "dir" ]; then

iocdir "$NAME"
echo "$iocpath"

#################################################################

elif [ "$CMD" == "cddir" ]; then


iocdir "$NAME"
cd "${iocpath}"

#################################################################

elif [ "$CMD" == "cfg" ]; then
   
   ioccfg "$NAME"
   echo "$iocfile"

#################################################################

elif [ "$CMD" == "less" ]; then
   ioccfg "$NAME"
   less $iocfile

#################################################################

elif [ "$CMD" == "data" ]; then
   error "$NAME"

   if [[ ! $iocpath =~ ^/.* ]]; then
      iocdatapath=/reg/d/iocData/"${NAME}"/iocInfo
      echo "${iocdatapath}"

   fi

#################################################################

elif [ "$CMD" == "telnet" ]; then
   error "$NAME"
   HOST=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*host: '\(\S*\)'.*$/\1/p")
   PORT=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*port: \(\S*\),.*$/\1/p");
   echo "$HOST":"$PORT"
   telnet "$HOST" "$PORT"


fi
