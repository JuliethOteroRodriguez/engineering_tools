#! /usr/bin/env bash


function cd {
    builtin cd "$@" && ls
}

usage(){
cat << EOF
usage: $0 ioc|pv [options]

Script that returns information about an ioc given its name or a PV associated with it

Signature:
iocTool <ioc>|<pv> [command] <ioc>|<pv>

default command is 'name', list of commands:
name : returns the name of the ioc
dir : returns the directory the ioc is running from
cddir : open the directory the ioc is running from 
less : opens the cfg (or st.cmd) in less
data : returns the path of the appropriate iocData directory if it exists
telnet : starts a telnet session with the ioc 

EOF
}

if [[ ($1 == "--help") || ($1 == "-h") ]]; then
        usage
        exit 0
fi


   
#<2 ---- error channel implementation needed 

if [ $# -lt 1 ]; then
   echo  'need arguments: input ioc or pv name'
fi
	
NAME=$1
CMD=$2

#################################################################

if [[ $NAME == *':'* ]]; then
   NAME=$(grep_pv "$NAME" | sed -n 's/\/reg\/d\/iocData\/\(\S*\)\/iocInfo/\1/p')
elif [[ $NAME == *'-'* ]]; then
   NAME=$1
fi

#################################################################

if [ "$CMD" == "name" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi

   if [[ ! $iocpath =~ ^/.* ]]; then
   echo "$NAME"
   fi
#################################################################

elif [ "$CMD" ==  "dir" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p"); 
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi
  
   if [[ ! $iocpath =~ ^/.* ]]; then
      iocpath=/reg/g/pcds/epics/${iocpath}
   fi
   echo "$iocpath"

#################################################################

elif [ "$CMD" == "cddir" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi

   if [[ ! $iocpath =~ ^/.* ]]; then
      iocpath=/reg/g/pcds/epics/${iocpath}
      #iocs= "${iocpath}"
      cd "${iocpath}"
      exec bash
   fi
 #################################################################

elif [ "$CMD" == "less" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi

   if [[ ! $iocpath =~ ^/.* ]]; then
      iocpath=/reg/g/pcds/epics/${iocpath}
   fi
   iocfile="${iocpath}"/"$NAME".cfg;
   if [ -f "$iocfile" ]; then
      less $iocfile
   else
      iocfile=${iocpath}/iocBoot/${NAME}/st.cmd
      if [ -f "$iocfile" ]; then
         less "$iocfile"
      else
         echo -e "Neither file found:\n"${iocpath}"/"${NAME}".cfg\n$iocfile"
      fi
   fi
#################################################################

elif [ "$CMD" == "data" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi

   if [[ ! $iocpath =~ ^/.* ]]; then

   iocdatapath=/reg/d/iocData/"${NAME}"/iocInfo
   echo "$iocdatapath"
   fi
#################################################################

elif [ "$CMD" == "telnet" ]; then
   iocpath=""
   iocpath=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*dir: '\(\S*\)'.*$/\1/p");
   if [ "$iocpath" == "" ]; then
      echo "Did not find ${NAME} running anywhere. Exiting..."
      return 1
   fi

   if [[ ! $iocpath =~ ^/.* ]]; then

   HOST=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*host: '\(\S*\)'.*$/\1/p");
   PORT=$(grep_ioc "$NAME" all | grep "id:'$NAME'" | sed -n "s/^.*port: \(\S*\),.*$/\1/p");
   echo "$HOST"
   echo "$PORT"
   telnet "$HOST" "$PORT"
   fi
fi

